-module(kuberl_v1_pod_spec).

-export([encode/1]).

-export_type([kuberl_v1_pod_spec/0]).

-type kuberl_v1_pod_spec() ::
    #{ 'activeDeadlineSeconds' => integer(),
       'affinity' => kuberl_v1_affinity:kuberl_v1_affinity(),
       'automountServiceAccountToken' => boolean(),
       'containers' := list(),
       'dnsConfig' => kuberl_v1_pod_dns_config:kuberl_v1_pod_dns_config(),
       'dnsPolicy' => binary(),
       'enableServiceLinks' => boolean(),
       'ephemeralContainers' => list(),
       'hostAliases' => list(),
       'hostIPC' => boolean(),
       'hostNetwork' => boolean(),
       'hostPID' => boolean(),
       'hostname' => binary(),
       'imagePullSecrets' => list(),
       'initContainers' => list(),
       'nodeName' => binary(),
       'nodeSelector' => maps:map(),
       'overhead' => maps:map(),
       'preemptionPolicy' => binary(),
       'priority' => integer(),
       'priorityClassName' => binary(),
       'readinessGates' => list(),
       'restartPolicy' => binary(),
       'runtimeClassName' => binary(),
       'schedulerName' => binary(),
       'securityContext' => kuberl_v1_pod_security_context:kuberl_v1_pod_security_context(),
       'serviceAccount' => binary(),
       'serviceAccountName' => binary(),
       'shareProcessNamespace' => boolean(),
       'subdomain' => binary(),
       'terminationGracePeriodSeconds' => integer(),
       'tolerations' => list(),
       'topologySpreadConstraints' => list(),
       'volumes' => list()
     }.

encode(#{ 'activeDeadlineSeconds' := ActiveDeadlineSeconds,
          'affinity' := Affinity,
          'automountServiceAccountToken' := AutomountServiceAccountToken,
          'containers' := Containers,
          'dnsConfig' := DnsConfig,
          'dnsPolicy' := DnsPolicy,
          'enableServiceLinks' := EnableServiceLinks,
          'ephemeralContainers' := EphemeralContainers,
          'hostAliases' := HostAliases,
          'hostIPC' := HostIPC,
          'hostNetwork' := HostNetwork,
          'hostPID' := HostPID,
          'hostname' := Hostname,
          'imagePullSecrets' := ImagePullSecrets,
          'initContainers' := InitContainers,
          'nodeName' := NodeName,
          'nodeSelector' := NodeSelector,
          'overhead' := Overhead,
          'preemptionPolicy' := PreemptionPolicy,
          'priority' := Priority,
          'priorityClassName' := PriorityClassName,
          'readinessGates' := ReadinessGates,
          'restartPolicy' := RestartPolicy,
          'runtimeClassName' := RuntimeClassName,
          'schedulerName' := SchedulerName,
          'securityContext' := SecurityContext,
          'serviceAccount' := ServiceAccount,
          'serviceAccountName' := ServiceAccountName,
          'shareProcessNamespace' := ShareProcessNamespace,
          'subdomain' := Subdomain,
          'terminationGracePeriodSeconds' := TerminationGracePeriodSeconds,
          'tolerations' := Tolerations,
          'topologySpreadConstraints' := TopologySpreadConstraints,
          'volumes' := Volumes
        }) ->
    #{ 'activeDeadlineSeconds' => ActiveDeadlineSeconds,
       'affinity' => Affinity,
       'automountServiceAccountToken' => AutomountServiceAccountToken,
       'containers' => Containers,
       'dnsConfig' => DnsConfig,
       'dnsPolicy' => DnsPolicy,
       'enableServiceLinks' => EnableServiceLinks,
       'ephemeralContainers' => EphemeralContainers,
       'hostAliases' => HostAliases,
       'hostIPC' => HostIPC,
       'hostNetwork' => HostNetwork,
       'hostPID' => HostPID,
       'hostname' => Hostname,
       'imagePullSecrets' => ImagePullSecrets,
       'initContainers' => InitContainers,
       'nodeName' => NodeName,
       'nodeSelector' => NodeSelector,
       'overhead' => Overhead,
       'preemptionPolicy' => PreemptionPolicy,
       'priority' => Priority,
       'priorityClassName' => PriorityClassName,
       'readinessGates' => ReadinessGates,
       'restartPolicy' => RestartPolicy,
       'runtimeClassName' => RuntimeClassName,
       'schedulerName' => SchedulerName,
       'securityContext' => SecurityContext,
       'serviceAccount' => ServiceAccount,
       'serviceAccountName' => ServiceAccountName,
       'shareProcessNamespace' => ShareProcessNamespace,
       'subdomain' => Subdomain,
       'terminationGracePeriodSeconds' => TerminationGracePeriodSeconds,
       'tolerations' => Tolerations,
       'topologySpreadConstraints' => TopologySpreadConstraints,
       'volumes' => Volumes
     }.
